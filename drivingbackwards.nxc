                  /* Version 2: System Design Project */

#define BTNCENTER BTN4
#define motor_left OUT_A
#define motor_right OUT_C
#define motor_arm OUT_B
#define sensor_right SENSOR_2
#define sensor_mid SENSOR_1
#define sensor_left SENSOR_3
//#define ultrasonic SENSOR_4

/* variable definition */
int power = 50;             // power motors
int power_low = 20;
int power_left, power_right;  // power left and right
int error = 0;
float kp = 0.8;
float kp2 = 1.2;
int turn;
bool not_black = TRUE;
bool no_obstacle = TRUE;


/* function definition */
// Driving

void drive()
/* function for regular line following */
{
  error = (sensor_left-sensor_right);
  if (error < 3 && error > -3)
  // if error small drive straight
  {
   power_left = power*1.5;
   power_right = power*1.5
   ;
  }
  else if (error < 5 && error > -5)
  {
   turn = kp * error;
   power_left= power+turn;
   power_right= power-turn;
  }
  else
  // steer for bigger errors
  {
   turn = kp2 * error;
   power_left= power_low+turn;
   power_right= power_low-turn;
  }
  OnFwd(motor_left, power_left);
  OnFwd(motor_right, power_right);
  Wait(3);
}


void turn_right()
/* turn 90 degrees right*/
{
  OnRev(motor_right, 25);
  OnFwd(motor_left, 20);
  Wait(1200);
}


void turn_left()
/* turn 90 degrees left*/
{
  OnRev(motor_left, 20);
  OnFwd(motor_right, 20);
  Wait(1200);
}


void catch_obstacle(int distance)
/* drive as long as no obstacle in sight
   stop when distance too low */
{
  no_obstacle = TRUE;
  while (no_obstacle)
  {
    if (SensorUS(IN_4) < distance)
    {
      no_obstacle = FALSE;
    }
    drive();
    Wait(3);
  }
  Off(OUT_AC);
}


void barcode()
/* drive until you reach the barcode */
{
  while (not_black)
  {
    if (sensor_mid < 40 && sensor_right > 40)
    {
      not_black = FALSE;
    }
    drive();
    Wait(3);
  }
}


void push()
/* push block over the edge by driving until distance large
   stop, turn and go back to barcode */
{
  OnFwd(motor_right, 40);
  OnFwd(motor_left, 40);
  Wait(1000);
  no_obstacle = TRUE;
  while (no_obstacle)
  {
    if (SensorUS(IN_4) < 30)
    {
      no_obstacle = FALSE;
    }
    ClearScreen();
    TextOut(0, LCD_LINE2, "obstacle?");
    NumOut(40, LCD_LINE3, SensorUS(IN_4));
    drive();
    Wait(3);
  }
  while (SensorUS(IN_4) < 30)
  {
   ClearScreen();
   TextOut(0, LCD_LINE2, "push!");
   OnFwd(motor_right, 40);
   OnFwd(motor_left, 40);
  }
  Off(OUT_AC);
  ClearScreen();
  TextOut(0, LCD_LINE2, "go back");
  OnRev(motor_right, 40);
  OnRev(motor_left, 40);
  Wait(800);
  turn_right();
  turn_right();
  barcode();
}

void drop()
/* drops ball */
{
 RotateMotor(motor_arm, -20, 180);
}

/* Main */
task main()
{
  SetSensorLight(IN_1);
  SetSensorLight(IN_2);
  SetSensorLight(IN_3);
  SetSensorLowspeed(IN_4);

  while(TRUE)
  {
   drive();
   Wait(3);
  }


}
