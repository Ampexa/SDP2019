/* Version 2: System Design Project */

#define BTNCENTER BTN4
#define motor_left OUT_A
#define motor_right OUT_B
#define motor_arm OUT_C
#define sensor_right SENSOR_1
#define sensor_mid SENSOR_2
#define sensor_left SENSOR_3
//#define ultrasonic SENSOR_4

/* variable definition */
int init_diff;      //initial difference of left and right
int diff_white;
int diff_black;

int power = 40;               // power motors
int power_left, power_right;  // power left and right
int error = 0;
int prev_error = 0;
int derivative = 0;
int integral = 0;
float kp = 1.3;
float ki = 0.001;
float kd = 0.01;
int turn;
bool not_black = TRUE;
bool no_obstacle = TRUE;


/* function definition */
// Initializing the differnce between sensors
int get_difference()
{
 // Initialize differnce on white background
 ClearScreen();
 TextOut(0, LCD_LINE1, "all on white?");
 TextOut(0, LCD_LINE2, "Press Enter to save");
 while(!ButtonPressed(BTNCENTER, false))
 {
  ClearScreen();
  TextOut(0, LCD_LINE3, "left");
  NumOut(40, LCD_LINE3, sensor_left);
  TextOut(0, LCD_LINE4, "right");
  NumOut(40, LCD_LINE4, sensor_right);
  TextOut(0, LCD_LINE5, "difference");
  NumOut(40, LCD_LINE5, sensor_left-sensor_right);
 }
 diff_white = sensor_left-sensor_right;
 ClearScreen();
 TextOut(0, LCD_LINE3, "saved difference white:");
 NumOut(0, LCD_LINE4, diff_white);
 Wait(2000);

 // Initialize differnce on black background
 ClearScreen();
 TextOut(0, LCD_LINE1, "all on black?");
 TextOut(0, LCD_LINE2, "Press Enter to save");
 while(!ButtonPressed(BTNCENTER, false))
 {
  ClearScreen();
  TextOut(0, LCD_LINE3, "left");
  NumOut(40, LCD_LINE3, sensor_left);
  TextOut(0, LCD_LINE4, "right");
  NumOut(40, LCD_LINE4, sensor_right);
  TextOut(0, LCD_LINE5, "difference");
  NumOut(40, LCD_LINE5, sensor_left-sensor_right);
 }
 diff_black = sensor_left-sensor_right;
 ClearScreen();
 TextOut(0, LCD_LINE3, "saved difference black:");
 NumOut(0, LCD_LINE4, diff_black);
 Wait(2000);

 // build avarage diffence and print on screen
 ClearScreen();
 init_diff = ((diff_black+diff_white)/2);
 TextOut(0, LCD_LINE3, "Initial Differnce:");
 NumOut(0, LCD_LINE4, init_diff);
}


// Driving

void drive()
{
  error = (sensor_left-sensor_right);
  integral = integral + error;
  derivative = error - prev_error;
  ClearScreen();
  TextOut(0, LCD_LINE1, "ultrasonic");
  NumOut(0, LCD_LINE2, SensorUS(IN_4));
  if (error < 2 && error > -2)
  // if error small drive straight
  {
   power_left = power*1.5;
   power_right = power*1.5;
  }
  else
  // steer for bigger errors
  {
   turn = kp * error + ki * integral + kd * derivative;
   power_left= power+turn;
   power_right= power-turn;
  }
  OnFwd(motor_left, power_left);
  OnFwd(motor_right, power_right);
  prev_error = error;
  Wait(3);
}


// Pushing Block



/* Main */
task main()
{
 SetSensorLight(IN_1);
 SetSensorLight(IN_2);
 SetSensorLight(IN_3);
 SetSensorLowspeed(IN_4);

 // Initialize difference
 //get_difference();

 // Warte vor Programmstart einige Sekunden
 Wait(5000);

 // Fahre solange es kein Hinderniss gibt
 while (no_obstacle)
 {
  if (SensorUS(IN_4) < 38)
  {
   no_obstacle = FALSE;
  }
  drive();
  Wait(3);
 }
 Off(OUT_AB);
 
 while (sensor_right > 30)
 {
  OnFwd(motor_right, 20);
  OnRev(motor_left, 20);
  Wait(3);
 }
 
 while (not_black)
 {
   if (sensor_mid < 40 && sensor_right > 40)
   {
    not_black = FALSE;
   }
  drive();
  Wait(3);
 }

 //OnFwd(motor_right, 20);
 //OnFwd(motor_left, 20);
 //Wait(500);
 
 OnRev(motor_right, 20);
 OnFwd(motor_left, 30);
 Wait(1200);



 no_obstacle = TRUE;
 while (no_obstacle)
 {
  if (SensorUS(IN_4) < 38)
  {
   no_obstacle = FALSE;
  }
  drive();
  Wait(3);
 }
 Off(OUT_AB);

}






